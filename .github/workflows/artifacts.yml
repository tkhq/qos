name: artifacts-build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch: # Allows manual invocation

jobs:
  # This job pre-warms the cache with toolchain
  toolchain-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          submodules: true

      - name: Cache
        id: cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          lookup-only: true
          key: toolchain-${{ hashFiles('config/apt-hashes-x86_64.list') }}
          path: cache/toolchain.tar

      - name: Setup Checkout
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y git-lfs
          git lfs fetch --include "fetch/apt/*"
          git lfs checkout

      - name: Run `make toolchain`
        if: steps.cache.outputs.cache-hit != 'true'
        shell: 'script -q -e -c "bash {0}"'
        run: |
          make cache/toolchain.tar

  # This job pre-warms the cache for rust
  rust-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache
        id: cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          lookup-only: true
          key: toolchain-rust-${{ hashFiles('Makefile,config/make.env') }}
          path: fetch/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot

      - name: Setup Checkout
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y git-lfs
          git lfs fetch --include "fetch" --exclude "fetch/apt,dist"
          git lfs fetch --include "fetch/apt/Packages.bz2"
          git lfs checkout

      # make (and hence toolchain) rely on file timestamps
      - name: git-restore-mtime
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -qq -y git-restore-mtime
          git restore-mtime
          git submodule foreach 'git restore-mtime'

      - name: Pull toolchain from cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          fail-on-cache-miss: true
          key: toolchain-${{ hashFiles('config/apt-hashes-x86_64.list') }}
          path: cache/toolchain.tar

      - name: Complete the setup of toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          make toolchain

      - name: Run `make fetch/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot`
        if: steps.cache.outputs.cache-hit != 'true'
        shell: 'script -q -e -c "bash {0}"'
        run: |
          make fetch/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot

  build:
    name: Build Toolchain Artifacts
    runs-on: ubuntu-latest
    needs:
      - toolchain-cache
      - rust-cache
    strategy:
      matrix:
        include:
          - target: qos_host.oci.x86_64.tar
          - target: qos_enclave.oci.x86_64.tar
          - target: qos_client.oci.x86_64.tar
    timeout-minutes: 50
    steps:
      - name: Checkout sources
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Checkout
        run: |
          sudo apt-get install -y git-lfs
          git lfs fetch --include "fetch" --exclude "fetch/apt,dist"
          git lfs fetch --include "fetch/apt/Packages.bz2"
          git lfs checkout

      # make (and hence toolchain) rely on file timestamps
      - name: git-restore-mtime
        run: |
          sudo apt-get install -qq -y git-restore-mtime
          git restore-mtime
          git submodule foreach 'git restore-mtime'

      - name: Pull toolchain from cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          fail-on-cache-miss: true
          key: toolchain-${{ hashFiles('config/apt-hashes-x86_64.list') }}
          path: cache/toolchain.tar

      - name: Complete the setup of toolchain
        run: |
          make toolchain

      - name: Pull rust from cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          fail-on-cache-miss: true
          key: toolchain-rust-${{ hashFiles('Makefile,config/make.env') }}
          path: fetch/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot

      - name: Run `make out/${{ matrix.target }}`
        shell: 'script -q -e -c "bash {0}"'
        run: |
          make --assume-old=fetch/rust out/${{ matrix.target }}

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{ matrix.target }}
          path: out/${{ matrix.target }}
          retention-days: 1

  upload_to_ecr:
    name: Upload toolchain artifacts to ECR
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::799078726966:role/github-qos

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@e407df249e6c155d03c0e4375f34bc2385f52d65 # v1.6.1

      - name: Download Artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2

      - name: Upload images to ECR
        env:
          images: >-
            qos_client
            qos_enclave
            qos_host
          tags: >-
            ${{ github.ref == format('refs/heads/{0}', 'main') && 'latest' || '' }}
            ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || '' }}
        run: |
          skopeo login \
            --username "${{ steps.login-ecr.outputs.docker_username_799078726966_dkr_ecr_us_east_1_amazonaws_com }}" \
            --password "${{ steps.login-ecr.outputs.docker_password_799078726966_dkr_ecr_us_east_1_amazonaws_com }}" \
            ${{ steps.login-ecr.outputs.registry }}
          for image in ${images}; do
            skopeo copy --all \
              "oci-archive:./${image}.oci.x86_64.tar/${image}.oci.x86_64.tar" \
              "docker://${{ steps.login-ecr.outputs.registry }}/tkhq/${image}:sha-${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
            for tag in ${tags}; do
              skopeo copy --all \
                "docker://${{ steps.login-ecr.outputs.registry }}/tkhq/${image}:sha-${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}" \
                "docker://${{ steps.login-ecr.outputs.registry }}/tkhq/${image}:${tag}"
            done
          done

  upload_to_ghcr:
    name: Upload toolchain artifacts to GHCR
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      - name: Upload images to GHCR
        env:
          images: >-
            qos_client
            qos_enclave
            qos_host
          tags: >-
            ${{ github.ref == format('refs/heads/{0}', 'main') && 'latest' || '' }}
            ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || '' }}
        run: |
          skopeo login \
            --username "${{ github.actor }}" \
            --password "${{ secrets.GITHUB_TOKEN }}" \
            ghcr.io
          for image in ${images}; do
            skopeo copy --all \
              "oci-archive:./${image}.oci.x86_64.tar/${image}.oci.x86_64.tar" \
              "docker://ghcr.io/tkhq/${image}:sha-${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
            for tag in ${tags}; do
              skopeo copy --all \
                "docker://ghcr.io/tkhq/${image}:sha-${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}" \
                "docker://ghcr.io/tkhq/${image}:${tag}"
            done
          done
